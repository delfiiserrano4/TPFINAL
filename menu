Unit UnitTPfinal;
interface
TYPE
 T_estaincias_turisticas = RECORD
 ID_estancia:integer;
 nom_estancia:STRING [60];
 apellidoyNombreD:STRING [60];
 domicilio:STRING [60];
 email: STRING [60];
 ESTADO: BOOLEAN;
 DNI_duenio:Integer;
 numerodecont:Integer;
 caracteristica:Integer;
 capacidad_maxima:Integer;
 tiene_pisina:STRING [2];
END;
T_ARCHIVO = FILE OF T_estaincias_turisticas;

VAR
estaincias_turisticas:T_ARCHIVO;

IMPLEMENTATION
PROCEDURE CREAR (VAR ARCH: T_ARCHIVO);
BEGIN
ASSIGN(ARCH,'C:\ARCHIVO_estancias_turisticas.DAT');
REWRITE(ARCH);
END;

PROCEDURE ABRIR (VAR ARCH: T_ARCHIVO);
BEGIN
ASSIGN(ARCH,'C:\ARCHIVO.DAT');
RESET(ARCH);
END;

PROCEDURE LEER_REGISTRO (VAR ARCH: T_ARCHIVO; POS:INTEGER; VAR REG:T_estaincias_turisticas);
BEGIN
SEEK(ARCH, POS);
READ(ARCH, REG);
END;

PROCEDURE GUARDAR_REGISTRO (VAR ARCH:T_ARCHIVO; POS:INTEGER; REG:T_estaincias_turisticas);
BEGIN
SEEK(ARCH, POS);
WRITE(ARCH, REG);
END;

PROCEDURE CARGAR_REGISTRO (VAR r: T_estaincias_turisticas);
begin
with registro do
  begin
  WRITE('INGRESE EL NOMBRE DE LA ESTANCIA:');
  READLN (nom_estancia);
  WRITE('INGRESE APELLIDO Y NOMBRE DEL DUENIO: ');
  READLN (apellidoyNombreD);
  WRITE('INGRESE EL DOMICILIO :');
  READLN (domicilio);
  WRITE('INGRESE EL EMAIL: ');
  READLN (email);
  WRITE('INGRESE EL DNI DEL DUENIO:');
  READLN (DNI_duenio);
  WRITE('INGRESE EL NUMERO DE CONTACTO:');
  READLN (numerodecont);
  WRITE('INGRESE LAS CARACTERISTICAS: ');
  READLN (caracteristica);
  WRITE('INGRESE LA CAPACIDAD MAXIMA: ');
  READLN (capacidad_maxima);
  WRITE(' Â¿TIENE PISINA?: ');
  READLN (tiene_pisina);
  ESTADO:= TRUE;
  end;
 end;
PROCEDURE CERRAR (VAR ARCH: T_ARCHIVO);
BEGIN
CLOSE(ARCH);
END;

PROCEDURE ORDEN_BURBUJA (VAR ARCH: T_ARCHIVO);
VAR R1, R2:T_estaincias_turisticas;
LIM,I,J:INTEGER;
BEGIN
LIM:= FILESIZE(ARCH)-1;
FOR I:= 0 TO LIM - 1 DO
FOR J:= 0 TO LIM - 1 DO
BEGIN
SEEK (ARCH,J);
READ (ARCH,R1);
SEEK (ARCH,J+1);
READ (ARCH,R2);
IF R1.N_CLIENTE > R2.N_CLIENTE THEN
BEGIN
SEEK (ARCH,J+1);
WRITE(ARCH,R1);
SEEK (ARCH,J);
WRITE(ARCH,R2);
END;
END;
END;

PROCEDURE BBIN (VAR ARCH:T_ARCHIVO; BUSCADO:INTEGER; VAR POS:LONGINT);
VAR R1:T_estaincias_turisticas;
PRI,ULT,MED:LONGINT;
BEGIN
PRI:=0;
ULT:= FILESIZE (ARCH)-1;
POS := -1;
WHILE (POS = -1) AND (PRI<= ULT) DO

BEGIN
MED:= (PRI + ULT) DIV 2;
SEEK (ARCH,MED);
READ (ARCH,R1);
IF R1.N_estaincias_turisticas = BUSCADO THEN POS:= MED
ELSE
IF R1.N_estaincias_turisticas > BUSCADO THEN ULT:= MED -1
ELSE PRI:= MED +1;
END;
END;

PROCEDURE LISTAR1(VAR ARCH:T_ARCHIVO);
VAR
REG:T_estaincias_turisticas;
BEGIN
RESET(ARCH);
WHILE NOT(EOF(ARCH)) DO
BEGIN
READ(ARCH, REG);
MOSTRAR_REGISTRO(REG);
END;
END;

PROCEDURE LISTAR2 (VAR ARCH:T_ARCHIVO; pos:Integer);
VAR
REG:T_estaincias_turisticas;
BEGIN
BEGIN
SEEK(ARCH,POS);
READ(ARCH, REG);
if reg.ESTADO = TRUE then MOSTRAR_REGISTRO(REG);
END;
END;
INTERFACE
TYPE
T_CLIENTE = RECORD
N_CLIENTE: INTEGER;
APyNOM: STRING[60];
ESTADO: BOOLEAN;
END;
T_ARCHIVO = FILE OF T_CLIENTE;

IMPLEMENTATION
PROCEDURE CREAR (VAR ARCH: T_ARCHIVO);
BEGIN
ASSIGN(ARCH,'C:\ARCHIVO_ESTANCIAS.DAT');
REWRITE(ARCH);
END;

PROCEDURE ABRIR (VAR ARCH: T_ARCHIVO);
BEGIN
ASSIGN(ARCH,'C:\ARCHIVO.DAT');
RESET(ARCH);
END;



PROCEDURE LEER_REGISTRO (VAR ARCH: T_ARCHIVO; POS:INTEGER; VAR REG:T_Cliente);
BEGIN
SEEK(ARCH, POS);
READ(ARCH, REG);
END;

PROCEDURE GUARDAR_REGISTRO (VAR ARCH:T_ARCHIVO; POS:INTEGER; REG:T_Cliente);
BEGIN
SEEK(ARCH, POS);
WRITE(ARCH, REG);
END;

PROCEDURE CARGAR_registro (VAR r: T_Cliente);
begin
with r do
begin
WRITE('INGRESE N_CLIENTE:');
READLN (N_CLIENTE);
WRITE('INGRESE APELLIDO Y NOMBRE: ');
READLN (N_CLIENTE);
ESTADO:= TRUE;
end;
end;

PROCEDURE CERRAR (VAR ARCH: T_ARCHIVO);
BEGIN
CLOSE(ARCH);
END;

PROCEDURE ORDEN_BURBUJA (VAR ARCH: T_ARCHIVO);
VAR R1, R2:T_ESTANCIAS;
LIM,I,J:INTEGER;
BEGIN
LIM:= FILESIZE(ARCH)-1;
FOR I:= 0 TO LIM - 1 DO
FOR J:= 0 TO LIM - I DO
BEGIN
SEEK (ARCH,J);
READ (ARCH,R1);
SEEK (ARCH,J+1);
READ (ARCH,R2);
IF R1.N_ESTANCIAS > R2.N_ESTANCIAS THEN
BEGIN
SEEK (ARCH,J+1);
WRITE(ARCH,R1);
SEEK (ARCH,J);
WRITE(ARCH,R2);
END;
END;
END;

PROCEDURE BBIN (VAR ARCH:T_ARCHIVO; BUSCADO:INTEGER; VAR POS:LONGINT);
VAR R1:T_ESTANCIAS;
PRI,ULT,MED:LONGINT;
BEGIN
PRI:=0;
ULT:= FILESIZE (ARCH)-1;
POS := -1;
WHILE (POS = -1) AND (PRI<= ULT) DO
BEGIN
MED:= (PRI + ULT) DIV 2;
SEEK (ARCH,MED);
READ (ARCH,R1);
IF R1.N_CLIENTE = BUSCADO THEN POS:= MED
ELSE
IF R1.N_CLIENTE > BUSCADO THEN ULT:= MED -1
ELSE PRI:= MED +1;
END;
END;

PROCEDURE LISTAR1(VAR ARCH:T_ARCHIVO);
VAR
REG:T_ESTANCIAS;
BEGIN
RESET(ARCH);
WHILE NOT(EOF(ARCH)) DO
BEGIN
READ(ARCH, REG);
MOSTRAR_REGISTRO(REG);
END;
END;

PROCEDURE LISTAR2 (VAR ARCH:T_ARCHIVO; pos:Integer);
VAR
REG:T_ESTANCIAS;
BEGIN
BEGIN
SEEK(ARCH,POS);
READ(ARCH, REG);
if reg.ESTADO = TRUE then MOSTRAR_REGISTRO(REG);
END;
END;
END.             
